#!/bin/sh
##############################################################
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
##############################################################

_ctrlc() {
    echo "Caught Ctrl^C signal"
    kill -TERM $child 2>/dev/null
    wait "$child"
    exit $?
}

_term() {
    echo "Caught SIGTERM signal"
    kill -TERM $child 2>/dev/null
    wait "$child"
    exit $?
}

if [ "$$" -eq "1" ]
then
    # We run as PID 1, which means we are a regular contains
    # and java would fail to auto-kill itself because PID 1
    # cannot received kill -9.
    # -> We start a child process, trap signals and propagate them.
    trap _term SIGTERM
    trap _ctrlc INT
    echo java -XX:OnOutOfMemoryError='kill -9 %p' ${JAVA_OPTS} "$@"
    java -XX:OnOutOfMemoryError='kill -9 %p' ${JAVA_OPTS} "$@" &
    child=$!
    wait "$child"
    exit $?
else
    # We don't run as PID 1, which means we are a lucky container,
    # probably run with "/bin/sh -c" or a Kubernetes POD container.
    # Java will be able to auto-kill itself so we don't need to
    # do anything :)
    echo java -XX:OnOutOfMemoryError='kill -9 %p' ${JAVA_OPTS} "$@"
    exec java -XX:OnOutOfMemoryError='kill -9 %p' ${JAVA_OPTS} "$@"
fi

